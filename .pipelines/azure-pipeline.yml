name: $(Date:yyyy-MM-dd)$(Rev:.r)

trigger:
    - none

parameters:
- name: winver
  displayName: "Windows Version to build"
  type: string
  default: "2016-Datacenter"
  values:
    - "2016-Datacenter"
    - "2019-Datacenter"
    
- name: pool
  displayName: "Image to Generate"
  type: string
  default: "p-windows"
  values:
    - "p-windows"
    - "p-linux"


jobs:
- job: build
  displayName: "Packer Build"
  timeoutInMinutes: 240

  pool:
    vmImage: 'ubuntu-latest'

  steps:

  - checkout: self
    clean: true
    persistCredentials: true

  - task: UsePythonVersion@0
    displayName: 'Install Python'
    inputs:
      versionSpec: '3.x'

  - script: |
      pip install ansible
      pip install pywinrm
    displayName: 'Install Ansible and PyWinRM'

  - script: |
      cd packer
      echo "###"
      echo "### --------- Launching Packer "
      echo "###"
      packer build -color=false -machine-readable ./${{ parameters.pool }}.json|tee output.log
      vhd=$(grep azure-arm,artifact,0,string,Azure.ResourceManagement.VMImage output.log | cut -d, -f6|cut -d: -f 8|sed 's/\\nTemplateUri//g'|awk '{print "https:"$0}')
      echo "###"
      echo "### --------- Packer Complete"
      echo "### --------- Prepairing VHD Copy from $vhd"
      echo "###"
      az storage blob copy start --account-name $storage_account --destination-container $goldimage_container --source-uri $vhd --account-key $sa_key --destination-blob "${{ parameters.pool }}-$(Build.BuildNumber).vhd"
      echo "###"
      echo "### --------- Az Complete" 
      echo "###"
    displayName: 'Running Packer'
    env:
      CHECKPOINT_DISABLE: "TRUE"
      vda: $(vda)
      vdacontrollers: $(vdacontrollers)
      rg_name: $(rg_name)
      client_id: $(client_id)
      client_secret: $(client_secret)
      subid: $(subid)
      tenantid: $(tenantid)
      storage_account: $(storage_account)
      sa_key: $(sa_key)
      media_container: $(media_container)
      goldimage_container: $(goldimage_container)
      winver: "${{ parameters.winver }}"
      pool: "${{ parameters.pool }}"
      location: $(location)
  - task: PublishBuildArtifacts@1
    displayName: 'Publishing Hotfix Report'
    condition: succeeded()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)/packer/hotfix.json'
      artifactName: installed-updates
  - task: PublishBuildArtifacts@1
    displayName: 'Publishing Installed Modules Report'
    condition: succeeded()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)/packer/package.json'
      artifactName: ps-modules
  - task: PublishBuildArtifacts@1
    displayName: 'Publishing Packer Manifest'
    condition: succeeded()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)/packer/manifest.json'
      artifactName: packer-manifest
